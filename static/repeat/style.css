/* General */

* {
    margin: 0;
    padding: 0;
    font-size: inherit;
    font-weight: inherit;
    list-style: none;
    line-height: 1;
    font-family: inherit;
    -webkit-font-smoothing: antialiased;
}

a {
    display: contents;
}

:root {
    --fontSize: clamp(2rem, 2.8vw, 2.6rem);
    --thin: 300;
    --regular: 400;
    --500: 500;
    --semi-bold: 600;
    --bold: 700;
    --black: 900;

    --backgroundColor: hsl(350, 70%, 98%);
    --textColor: hsl(360, 100%, 50%);

    --backgroundColor: white;
    --textColor: black;

    --borderWidth: 2px;
    --lineHeight: 1.3rem;
    --padding: .8rem;
}
@media (max-width: 500px) {
    :root {
        --borderWidth: 1px;
    }
}

html {
    font-family: "Inter var experimental", "Inter varl", "Suisse Intl", fantasy;
    font-weight: var(--regular);
    font-size: var(--fontSize);
    height: 100%;
    caret-color : var(--textColor);
}

body {
    height: 100%;
    background: var(--backgroundColor);
    color: var(--textColor);
    display: grid;
    grid-template-rows: 100%;
    overflow: hidden;
}
@media (min-width: 501px) {
    body {
        grid-template-columns: 35vw 1fr;
    }
}
@media (max-width: 500px) {
    body {
        grid-template-columns: 100% 0;
    }
    :root:not([data-vocablist-mode="none"]) body {
        grid-template-columns: 0 100%;
    }
}

/* Modifiers */

.nowrap {
    white-space: nowrap;
}

.avatar {
    background-size: contain !important;
    position: relative;
}

.avatar::before {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--textColor);
    z-index: 100;
    content: "";
    border-radius: 100%;
    mix-blend-mode: color;
}

.spaceBetween {
    justify-content: space-between;
}

.uppercase {
    text-transform: uppercase;
}

.noPointerEvents {
    pointer-events: none;
}

.textOverflow {
    overflow: hidden;
    text-overflow: ellipsis;
    flex-shrink: 1;
}

.dottedBorder {
    border-bottom-style: dotted;
}

.fullWidth {
    width: 100%;
    flex-shrink: 1;
}

/* Buttonbar */

header {
    display: flex;
    position: sticky;
    z-index: 943;
    overflow-x: auto;
    gap: .5rem;
    flex-shrink: 0;
    --buttonHeight: calc(var(--fontSize) * .55);
}
header:not(:hover) {
    mix-blend-mode: exclusion;
}
header:hover {
    filter: invert(1);
}
@media (min-width: 500px) {
    header {
        top: 0;
        padding: var(--padding) var(--padding) 0;
    }
}
@media (max-width: 500px) {
    header {
        bottom: 0;
        order: 1;
        padding-bottom: var(--padding);
    }
}

fieldset {
    border: none;
    display: flex;
    align-items: center;
    min-width: 0;
    flex-shrink: 0;
}

fieldset.buttonGroup {
    gap: .2rem;
}

button {
    color: var(--backgroundColor);
    background: var(--textColor);
    /* background: transparent; */
    border: var(--borderWidth) solid var(--backgroundColor);
    border-radius: 100vw;
    height: var(--buttonHeight);
    padding: 0 1.4ex;
    font-weight: var(--500);
    font-size: .7rem;
    cursor: pointer;
    flex-shrink: 0;
    text-transform: uppercase;
}

button:hover, button.active, input[type="checkbox"]:checked + button {
    background: var(--backgroundColor);
    color: var(--textColor);
}

button.githubLogin {
    /* font-family: PragmataPro-Regular;
    font-size: .8rem; */
}

button.circular {
    width: var(--buttonHeight);
    padding: 0;
}

input[type="checkbox"] {
    display: none;
}

/* Column */

.column {
    box-sizing: border-box;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
}
@media (min-width: 501px) {
    .column::-webkit-scrollbar {
        width: .4rem;
    }
    .column::-webkit-scrollbar-track {
        background: var(--backgroundColor);
    }
    .column::-webkit-scrollbar-thumb {
        background: var(--textColor);
    }
    .column::-webkit-scrollbar:hover {
        cursor: ns-resize;
    }
}
@media (max-width: 500px) {
    .column {
        gap: var(--padding);
    }
}

/* Filelist */

#fileList {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    font-weight: 400;
    letter-spacing: -.05ex;
    gap: 0.2ex;
}
@media (min-width: 501px) {
    #fileList {
        padding: var(--padding);
    }
}
@media (max-width: 500px) {
    #fileList {
        justify-content: flex-end;
    }
}

#fileList li {
    cursor: pointer;
    position: relative;
    display: flex;
    word-break: break-word;
    gap: 0.2ex;
    text-transform: uppercase;
    font-variation-settings: "slnt" 0;
    transition: all 250ms ease;
}

#fileList li::before {
    content: attr(data-score) "®";
    white-space: pre;
    font-feature-settings: "tnum" 1, "zero" 1;
}

#fileList li:hover,
li#currentlyLoadedList {
    text-decoration: underline;
    font-variation-settings: "slnt" -10;
}

.loading {
    font-size: 4rem;
    line-height: initial;
    font-size: 4rem;
    text-align: center;
    line-height: initial;
    flex-grow: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    font-feature-settings: "case" 1, "ss02" 1;
}

.loading::before {
    animation: rotate 1300ms linear infinite, rotate2 1600ms linear infinite;
}

@keyframes rotate2 {
    0% {
        transform: rotate(0);
    } 100% {
        transform: rotate(360deg);
    }
}

@keyframes rotate {
    0%, 100% {
        content: var(--percentage, "†");
    }
    33% {
        content: var(--percentage, "‡");
    }
    66% {
        content: var(--percentage, "+");
    }
}

@keyframes load {
    from {
        transform: translateX(-40%);
    } to {
        transform: translateX(-60%);
    }
}

/* Vocablist */

#vocabList {
    flex-grow: 1;
}
@media (min-width: 501px) {
    #vocabList {
        padding: var(--padding);
    }
}
@media (max-width: 500px) {
    #vocabList .row {
        padding: calc(var(--padding) * .05) 0;
        font-size: .6rem;
    }
}

#vocabListHeader {
    border: var(--borderWidth) solid var(--textColor);
    border-radius: 50%;
    font-weight: var(--regular);
    padding: var(--padding) 0;
    text-align: center;
    word-break: break-word;
}
@media (min-width: 501px) {
    #vocabListHeader {
        font-size: 1.5em;
    }
}

#vocabListHeader[contenteditable="true"]:empty::after {
    font-weight: var(--thin);
    content: "( TITLE )";
    font-feature-settings: "case" 1;
}

#vocabListHeader[contenteditable="true"] {
    border-bottom-style: dotted;
}

#vocabListHeader[contenteditable="true"]:focus {
    outline: none;
    border-bottom-style: dotted;
}

#vocabListEntries {
    display: flex;
    flex-direction: column;
}

#vocabListEntries .vocabEntryRow {
    position: relative;
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
    justify-content: space-between;
}
@media (min-width: 501px) {
    #vocabListEntries .vocabEntryRow {
        gap: .5rem;
    }
}

.vocabEntry {
    box-sizing: border-box;
    position: relative;
    border-bottom: var(--borderWidth) solid var(--textColor);
    padding: calc(var(--padding) * .25) 0;
    min-height: 1.5em;
    word-break: break-word;
}
@media (max-width: 500px) {
    .vocabEntry {
        font-size: .7em;
    }
}

.vocabEntry[contenteditable="true"] {
    border-bottom-style: dotted;
}

.vocabEntry[contenteditable="true"]:focus {
    outline: none;
    border-bottom-style: dotted;
}

[data-marked-for-deletion] {
    display: none !important;
}

#vocabListEntries span[contenteditable="true"]:empty::after {
    content: "◊";
}

/* VocabTestController */

[data-vocablist-mode="test"] #vocabListEntries .vocabEntryRow:not([data-test-row]) {
    display: none;
}

[data-test-row="active"],
[data-test-row="incorrect"] {
    font-weight: var(--bold);
}

[data-test-row="incorrect"] [contenteditable]::before {
    content: attr(data-original-value);
    margin-right: .5em;
}

[data-test-row="incorrect"] [contenteditable]::after {
    content: attr(data-user-value) !important;
    text-decoration: line-through;
}

.progress {
    display: flex;
    align-items: center;
    justify-content: center;
    border: var(--borderWidth) solid var(--textColor);
    padding: 0 1em;
    border-radius: 100%;
}

.progress::before {
    content: attr(data-numr);
    font-feature-settings: "numr";
}

.progress::after {
    content: attr(data-dnom);
    font-feature-settings: "dnom";
}